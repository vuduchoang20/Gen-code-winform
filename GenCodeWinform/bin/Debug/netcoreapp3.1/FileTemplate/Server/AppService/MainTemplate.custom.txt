using System.Linq;
using System.Linq.Dynamic.Core;
using System.Threading.Tasks;
using Abp.Application.Services.Dto;
using Abp.Authorization;
using Abp.Domain.Repositories;
using Abp.Linq.Extensions;
using Abp.UI;
using Microsoft.EntityFrameworkCore;
using Zero;
using Zero.Authorization;
using DPS.Lib.Application.Shared.Interface.Basic;
using DPS.Lib.Core.Basic;
using DPS.Lib.Application.Shared.Dto.Basic.Phone;

namespace DPS.Lib.Application.Services.Basic
{
    [AbpAuthorize(LibPermissions.Phone)]
    public class PhoneAppService : ZeroAppServiceBase, IPhoneAppService
    {
        private readonly IRepository<Phone> _phoneRepository;

        public PhoneAppService(IRepository<Phone> phoneRepository)
        {
            _phoneRepository = phoneRepository;
        }

        private IQueryable<PhoneDto> PhoneQuery(QueryInput queryInput)
        {
            var input = queryInput.Input;
            var id = queryInput.Id;

            var query = from obj in _phoneRepository.GetAll()

                    .Where(o => !o.IsDeleted && o.TenantId == AbpSession.TenantId)
                    .WhereIf(input != null && !string.IsNullOrWhiteSpace(input.Filter), e => e.Code.Contains(input.Filter) || e.Name.Contains(input.Filter) || e.Note.Contains(input.Filter))
                    .WhereIf(id.HasValue, e => e.Id == id.Value)
                select new PhoneDto
                {
                    Id = obj.Id,
                    Code = obj.Code,
                    Name = obj.Name,
                    Note = obj.Note,
                    IsActive = obj.IsActive
                };
            return query;
        }

        private class QueryInput
        {
            public GetAllPhoneInput Input { get; init; }
            public int? Id { get; init; }
        }

        public async Task<PagedResultDto<GetPhoneForViewDto>> GetAll(GetAllPhoneInput input)
        {

            var queryInput = new QueryInput
            {
                Input = input
            };
            
            var objQuery = PhoneQuery(queryInput);
            var pagedAndFilteredAuthors = objQuery.OrderBy(input.Sorting ?? "id asc").PageBy(input);

            var objs = from o in pagedAndFilteredAuthors
                select new GetPhoneForViewDto
                {
                    Phone = ObjectMapper.Map<PhoneDto>(o)
                };

            var totalCount = await objQuery.CountAsync();
            var res = await objs.ToListAsync();

            return new PagedResultDto<GetPhoneForViewDto>(
                totalCount,
                res
            );
        }

        [AbpAuthorize(LibPermissions.Phone_Edit)]
        public async Task<GetPhoneForEditOutput> GetPhoneForEdit(EntityDto input)
        {

            var queryInput = new QueryInput
            {
                Id = input.Id
            };

            var phone = await PhoneQuery(queryInput).FirstOrDefaultAsync();

            var output = new GetPhoneForEditOutput
            {
                Phone = ObjectMapper.Map<CreateOrEditPhoneDto>(phone)
            };
            return output;
        }

        private async Task ValidateDataInput(CreateOrEditPhoneDto input)
        {
            var res = await _phoneRepository.GetAll()
                .Where(o => !o.IsDeleted && o.TenantId == AbpSession.TenantId && o.Code.Equals(input.Code) && o.Name.Equals(input.Name))
                .WhereIf(input.Id.HasValue, o => o.Id != input.Id)
                .FirstOrDefaultAsync();
            if (res != null) throw new UserFriendlyException(L("Error"), L("CodeAlreadyExists"));
        }

        public async Task CreateOrEdit(CreateOrEditPhoneDto input)
        {
            input.Code = input.Code.Trim();
            input.Name = input.Name.Trim();
            
            await ValidateDataInput(input);

            if (!input.Id.HasValue)
            {
                await Create(input);
                return;
            }

            await Update(input);
        }

        [AbpAuthorize(LibPermissions.Phone_Create)]
        private async Task Create(CreateOrEditPhoneDto input)
        {
            var obj = ObjectMapper.Map<Phone>(input);
            obj.TenantId = AbpSession.TenantId;
            await _phoneRepository.InsertAndGetIdAsync(obj);
        }

        [AbpAuthorize(LibPermissions.Phone_Edit)]
        private async Task Update(CreateOrEditPhoneDto input)
        {
            if (input.Id.HasValue)
            {
                var obj = await _phoneRepository.FirstOrDefaultAsync(o => o.TenantId == AbpSession.TenantId && o.Id == input.Id);
                if (obj == null) throw new UserFriendlyException(L("NotFound"));
                ObjectMapper.Map(input, obj);
            }
        }

        [AbpAuthorize(LibPermissions.Phone_Delete)]
        public async Task Delete(EntityDto input)
        {
            var obj = await _phoneRepository.FirstOrDefaultAsync(o => o.TenantId == AbpSession.TenantId && o.Id == input.Id);
            if (obj == null) throw new UserFriendlyException(L("NotFound"));
            await _phoneRepository.DeleteAsync(obj.Id);
        }
    }
}